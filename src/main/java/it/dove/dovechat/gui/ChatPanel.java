/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.dove.dovechat.gui;

import it.dove.dovechat.logic.ConnectionEvent;
import it.dove.dovechat.logic.EventManager;
import it.dove.dovechat.logic.TrayIconDisplayer;
import it.dove.dovechat.mqtt.MQTTClient;
import java.awt.Color;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollBar;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;

/**
 *
 * @author Luca
 */
public class ChatPanel extends javax.swing.JPanel implements ConnectionEvent {

    final SystemTray systemTray = SystemTray.getSystemTray();
    // final TrayIcon trayIcon = new TrayIcon(new javax.swing.ImageIcon(getClass().getResource("/it/dove/dovechat/icons/gdot_red_16.png")).getImage(), "non so");

    /**
     * Creates new form ChatPanel
     */
    public ChatPanel() {
        initComponents();
        EventManager.getInstance().addConnectionEvents(this);
        this.jScrollPane1.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            public void adjustmentValueChanged(AdjustmentEvent e) {
                e.getAdjustable().setValue(e.getAdjustable().getMaximum());
            }
        });

    }

    public void focusMe() {
        jTextPane_input.requestFocus();
        jTextPane_input.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane_chat = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane_input = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();

        jTextPane_chat.setEditable(false);
        jTextPane_chat.setBackground(new java.awt.Color(255, 255, 204));
        jTextPane_chat.setContentType("text/html"); // NOI18N
        jTextPane_chat.setText("<html><b>Welcome!</b><br>");
        jScrollPane1.setViewportView(jTextPane_chat);

        jTextPane_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextPane_inputKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTextPane_input);

        jButton1.setText("Invia");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendMessage() {
        String text = jTextPane_input.getText();
        if (text.equals("")) {
            return;
        }
        jTextPane_input.setText("");
        MQTTClient.getInstance().sendChatMessage(text);
        focusMe();
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        sendMessage();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextPane_inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane_inputKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sendMessage();
        }
    }//GEN-LAST:event_jTextPane_inputKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane_chat;
    private javax.swing.JTextPane jTextPane_input;
    // End of variables declaration//GEN-END:variables

    @Override
    public void userConnected(String nickName) {
        chatMessageReceived("System", "" + nickName + " sta origliando..");
    }

    @Override
    public void ackReceived(int error) {

    }

    @Override
    public void chatMessageReceived(String author, String message) {
        //  this.trayIcon.displayMessage("caption", "text", TrayIcon.MessageType.INFO);

        try {
            HTMLDocument doc = (HTMLDocument) this.jTextPane_chat.getStyledDocument();
            if (author.equals(MQTTClient.getInstance().getMyNickName())) {
                doc.insertAfterEnd(doc.getCharacterElement(doc.getLength()), ("<font color=blue><b>" + author + ":</b></font> " + message + "<br>"));
            } else if (author.equals("System")) {
                doc.insertAfterEnd(doc.getCharacterElement(doc.getLength()), ("<font color=red><i>" + author + ": " + message + "</i></font><br>"));
            } else {

                doc.insertAfterEnd(doc.getCharacterElement(doc.getLength()), ("<b>" + author + ":</b> " + message + "<br>"));
            }
//            JScrollBar vertical = this.jScrollPane1.getVerticalScrollBar();
//            vertical.setValue(vertical.getMaximum());

//            this.jTextPane_chat.invalidate();
//            this.jTextPane_chat.revalidate();
//            this.jTextPane_chat.validate();
//            doc.insertString(doc.getLength(), ("<b>"+author+":</b> "+message+"\n"), null);
        } catch (BadLocationException exc) {
            exc.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void userDisonnected(String nickName) {
        chatMessageReceived("System", "" + nickName + " è passato a miglior vita");
    }

    @Override
    public void serverShutDown(final int second) {
        chatMessageReceived("System", "Il server sarà arrestato tra " + second + " secondi.");
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = second; i > 0; i--) {
                    if (i == 120) {
                        chatMessageReceived("System", "SERVER SHUTDOWN tra 2 minuti");
                    }
                    if (i == 60) {
                        chatMessageReceived("System", "SERVER SHUTDOWN tra 1 minuto");
                    }
                    if (i == 30) {
                        chatMessageReceived("System", "SERVER SHUTDOWN tra " + i + " secondi.");
                    }
                    if (i == 10) {
                        chatMessageReceived("System", "SERVER SHUTDOWN tra " + i + " secondi.");
                    }
                    if (i <= 5) {
                        chatMessageReceived("System", "SERVER SHUTDOWN tra " + i + " secondi.");
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ChatPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                jTextPane_chat.setBackground(Color.gray);
                chatMessageReceived("System", "TUTTE LE COMUNICAZIONI SONO INTERROTTE.");
                TrayIconDisplayer.getInstance().displayError("Server Shutdown", "Il server si è scollegato.");
            }
        });
        t.start();
    }
}
